require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/cities", type: :request do
  let(:user) { create(:user) }
  before do
    user.confirm
    sign_in user
  end

  let(:valid_attributes) do
    {
    name: "Paris",
    zip_code: 75000
    }
  end

  let(:invalid_attributes) do
    {
    name: "Paris",
    zip_code: "abc"
    }
  end

  describe "GET /cities" do
    before do
      create_list(:city, 5)
    end

    it "returns a list of cities" do
      get "/cities"

      expect(response).to have_http_status(:ok)
      expect(json_response.size).to eq(6)
    end
  end

  describe "GET /cities/:id" do
    let(:city) { create(:city) }

    it "returns a specific city" do
      get "/cities/#{city.id}"

      expect(response).to have_http_status(:ok)
      expect(json_response['id']).to eq(city.id)
      expect(json_response['name']).to eq(city.name)
    end

    it "returns a 404 error when the city is not found" do
      get "/cities/99999"  # ID qui n'existe pas

      expect(response).to have_http_status(:not_found)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new City" do
        expect {
          post "/cities", params: { city: valid_attributes }
        }.to change(City, :count).by(1)

        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new city" do
        expect {
          post "/cities", params: { city: invalid_attributes }
        }.not_to change(City, :count)

        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /cities/:id" do
    let(:city) { create(:city, name: "Paris", zip_code: 75000) }
    let(:new_attributes) { { name: "Toulouse" } }

    context "with valid parameters" do
      it "updates the requested city" do
        patch "/cities/#{city.id}", params: { city: new_attributes }

        expect(response).to have_http_status(:ok)
        expect(city.reload.name).to eq("Toulouse")  # Vérifie que le nom a bien été mis à jour
      end
    end

    context "with invalid parameters" do
      it "does not update the city" do
        patch "/cities/#{city.id}", params: { city: { name: "" } }

        expect(response).to have_http_status(:unprocessable_entity)
        expect(city.reload.name).to eq("Paris")  # Le nom doit rester inchangé
      end
    end
  end

  describe "DELETE /cities/:id" do
    let!(:city) { create(:city) }  # Utilise `!` pour la création immédiate

    it "deletes the city" do
      expect {
        delete "/cities/#{city.id}"
      }.to change(City, :count).by(-1)

      expect(response).to have_http_status(:ok)  # Vérifie un statut 204 pour suppression réussie
    end

    it "returns a 404 when the city is not found" do
      delete "/cities/99999"  # ID inexistant

      expect(response).to have_http_status(:not_found)
    end
  end
end
